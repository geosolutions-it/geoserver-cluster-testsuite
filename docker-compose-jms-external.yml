x-common-geoserver:
  &default-common-geoserver
  image: kartoza/geoserver:2.25.2
  restart: unless-stopped
  env_file:
    - .env
  healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null -u admin:'geoserver' http://localhost:8080/geoserver/rest/about/version.xml"
      interval: 1m30s
      timeout: 10s
      retries: 10
  volumes:
    - geoserver-cluster-data:/opt/geoserver/data_dir
    - geoserver-cluster-gwc-data:/opt/geoserver/gwc
    - ./geoserver/logging.xml:/opt/geoserver/data_dir/logging.xml:ro
    - ./geoserver/jdbcstatusstore.props:/opt/geoserver/data_dir/jdbcstatusstore.props:ro
    - ./geoserver/controlflow.properties:/opt/geoserver/data_dir/controlflow.properties:rw
    - ./geoserver/context-jndi.xml:/usr/local/tomcat/conf/context.xml:rw
    # - ./geoserver/patch-hazelcast.sh:/usr/local/bin/patch-hazelcast.sh
  # entrypoint: ["/bin/bash", "-c"]
  # command:
  #   - |
  #     apt-get update && apt-get install -y xmlstarlet
  #     chmod +x /usr/local/bin/patch-hazelcast.sh
  #     /usr/local/bin/patch-hazelcast.sh
  #     /scripts/entrypoint.sh

x-common-activemq:
  &default-common-activemq
  image: kartoza/activemq-docker:local-build
  build: activemq-docker
  restart: unless-stopped

services:

  db:
    image: kartoza/postgis:16-3.4
    volumes:
      - geo-db-data:/var/lib/postgresql
      - ./db/postgresql.conf:/etc/postgresql/16/main/postgresql.conf.template:ro
    # ports:
    #   - "55432:5432"
    environment:
      - POSTGRES_JNDI=TRUE
      - POSTGRES_DB=gis,data,sample,geoserver_config,geoserver_data
      - POSTGRES_USER=docker
      - POSTGRES_PASS=docker
      - POSTGRES_MAX_CONNECTIONS=500
      - POSTGRES_SHARED_BUFFERS=4GB
      - ALLOW_IP_RANGE=0.0.0.0/0
      - FORCE_SSL=TRUE
    restart: unless-stopped
    healthcheck:
      test: "PGPASSWORD=docker pg_isready -h 127.0.0.1 -U docker -d gis"

  broker1:
    << : *default-common-activemq
    environment:
      - JAVA_HOME=/opt/java/openjdk
      - HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=data
      - POSTGRES_USER=docker
      - POSTGRES_PASS=docker
      - ACTIVEMQ_SERVER_URI=tcp://broker1:61616?maximumConnections=1000&wireFormat.maxFrameSize=104857600&jms.useAsyncSend=false&transport.daemon=true
      - ACTIVEMQ_SERVER_DISCOVERYURI=multicast://default
      - SSL_MODE=ALLOW
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: netstat -ltn | grep -c ":61616"
      interval: 30s
      timeout: 10s
      retries: 10

  broker2:
    << : *default-common-activemq
    environment:
      - JAVA_HOME=/opt/java/openjdk
      - HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=data
      - POSTGRES_USER=docker
      - POSTGRES_PASS=docker
      - ACTIVEMQ_SERVER_URI=tcp://broker2:61616?maximumConnections=1000&wireFormat.maxFrameSize=104857600&jms.useAsyncSend=false&transport.daemon=true
      - ACTIVEMQ_SERVER_DISCOVERYURI=multicast://default
      - SSL_MODE=ALLOW
    depends_on:
      db:
        condition: service_healthy
      broker1:
        condition: service_healthy
    healthcheck:
      test: netstat -ltn | grep -c ":61616"
      interval: 30s
      timeout: 10s
      retries: 10

  broker3:
    << : *default-common-activemq
    environment:
      - JAVA_HOME=/opt/java/openjdk
      - HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=data
      - POSTGRES_USER=docker
      - POSTGRES_PASS=docker
      - ACTIVEMQ_SERVER_URI=tcp://broker3:61616?maximumConnections=1000&wireFormat.maxFrameSize=104857600&jms.useAsyncSend=false&transport.daemon=true
      - ACTIVEMQ_SERVER_DISCOVERYURI=multicast://default
      - SSL_MODE=ALLOW
    depends_on:
      db:
        condition: service_healthy
      broker1:
        condition: service_healthy
    healthcheck:
      test: netstat -ltn | grep -c ":61616"
      interval: 30s
      timeout: 10s
      retries: 10

  master:
    << : *default-common-geoserver
    # ports:
    #   - "8080:8080"
    environment:
      - CLUSTERING=true
      - CLUSTER_DURABILITY=false
      - BROKER_URL=failover:(tcp://broker1:61616,tcp://broker2:61616,tcp://broker3:61616)
      - READONLY=disabled
      - TOGGLE_MASTER=true
      - TOGGLE_SLAVE=false
      - EMBEDDED_BROKER=disabled
    depends_on:
        db:
          condition: service_healthy

  node1:
    << : *default-common-geoserver
    # ports:
    #   - "8081:8080"
    environment:
      - CLUSTERING=true
      - CLUSTER_DURABILITY=false
      - BROKER_URL=failover:(tcp://broker1:61616,tcp://broker2:61616,tcp://broker3:61616)
      - READONLY=enabled
      - TOGGLE_MASTER=false
      - TOGGLE_SLAVE=true
      - EMBEDDED_BROKER=disabled
    depends_on:
        master:
          condition: service_healthy

  node2:
    << : *default-common-geoserver
    # ports:
    #   - "8082:8080"
    environment:
      - CLUSTERING=true
      - CLUSTER_DURABILITY=false
      - BROKER_URL=failover:(tcp://broker1:61616,tcp://broker2:61616,tcp://broker3:61616)
      - READONLY=enabled
      - TOGGLE_MASTER=false
      - TOGGLE_SLAVE=true
      - EMBEDDED_BROKER=disabled
    depends_on:
        master:
          condition: service_healthy

  node3:
    << : *default-common-geoserver
    # ports:
    #   - "8083:8080"
    environment:
      - CLUSTERING=true
      - CLUSTER_DURABILITY=false
      - BROKER_URL=failover:(tcp://broker1:61616,tcp://broker2:61616,tcp://broker3:61616)
      - READONLY=enabled
      - TOGGLE_MASTER=false
      - TOGGLE_SLAVE=true
      - EMBEDDED_BROKER=disabled
    depends_on:
        master:
          condition: service_healthy

  haproxy:
    image: haproxy:latest
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      master:
        condition: service_healthy
    environment:
      - RSYSLOG_UDP_SERVER=invalid

  # nginx:
  #   image: nginx:latest
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     master:
  #       condition: service_healthy
  #     node1:
  #       condition: service_healthy
  #     node2:
  #       condition: service_healthy
  #     node3:
  #       condition: service_healthy

volumes:
  geo-db-data:
  geoserver-cluster-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./geoserver/ne-styles
  geoserver-cluster-gwc-data:
